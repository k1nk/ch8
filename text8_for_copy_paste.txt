
**RealVNC Viewer
https://www.realvnc.com/en/connect/download/viewer/

(参考)7-Zip
https://sevenzip.osdn.jp/

**ウェブカメラのテスト
mkdir Lesson
cd /Lesson
sudo apt-get install fswebcam
fswebcam image.jpg
fswebcam -r 1280x720 --no-banner image2.jpg

**音声出力先の設定
sudo raspi-config
speaker-test -t sine -f 1000
speaker-test -t wav

**pipのインストール
wget https://bootstrap.pypa.io/get-pip.py
sudo python get-pip.py

**virtualenvのインストール
sudo pip install virtualenv virtualenvwrapper
sudo rm -rf ~/.cache/pip

***~/.profileの最後の行に以下を追加します
# virtualenv and virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh

***変更を反映させます。
source ~/.profile

***仮想環境の作成
mkvirtualenv cv -p python2

**OpenCVのインストール
***仮想環境に入る
source ~/.profile
workon cv

***numpyのインストール
pip install numpy

**依存関係のあるパッケージのインストール
sudo apt-get update
sudo apt-get install build-essential cmake pkg-config
sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install libxvidcore-dev libx264-dev
sudo apt-get install libgtk2.0-dev
sudo apt-get install libatlas-base-dev gfortran
sudo apt-get install python2.7-dev python3-dev

**OpenCVのインストール
wget https://github.com/mt08xx/files/raw/master/opencv-rpi/libopencv3_3.3.1-20171126.2_armhf.deb
sudo apt install -y ./libopencv3_3.3.1-20171126.2_armhf.deb
sudo ldconfig

***仮想環境内からのリンクの作成
ls -l /usr/local/lib/python2.7/dist-packages/
cd ~/.virtualenvs/cv/lib/python2.7/site-packages/
ln -s /usr/local/lib/python2.7/dist-packages/cv2.so cv2.so

***OpenCVインストールの確認
source ~/.profile 
workon cv
python
>>> import cv2
>>> cv2.__version__
'3.3.1'

>>>quit()

**TensorFlowのインストール
sudo apt-get install libblas-dev liblapack-dev python-dev libatlas-base-dev gfortran python-setuptools
pip install http://ci.tensorflow.org/view/Nightly/job/nightly-pi/lastSuccessfulBuild/artifact/output-artifacts/tensorflow-1.7.0-cp27-none-any.whl

**h5pyのインストール(1120-1130)
sudo apt-get install libhdf5-dev
pip install h5py

**scipyのインストール
pip install scipy

**Kerasのインストール
pip install keras

**PILのインストール(1134-1136)
pip install Pillow

**InceptionV3のインストール
cd ~/Lesson
git clone https://github.com/fchollet/deep-learning-models.git

cd ~/Lesson/deep-learning-models

プログラムの修正　inception_v3.py　１５７行目
（修正前）
    input_shape = _obtain_input_shape(
        input_shape,
        default_size=299,
        min_size=139,
        data_format=K.image_data_format(),
        include_top=include_top)

（修正後）
    input_shape = _obtain_input_shape(
        input_shape,
        default_size=299,
        min_size=139,
        data_format=K.image_data_format(),
        require_flatten=include_top)

**InceptionV3を使った画像認識
象の画像をダウンロード
wget https://upload.wikimedia.org/wikipedia/commons/6/63/African_elephant_warning_raised_trunk.jpg -O elephant.jpg

象の画像を認識させてみる
python inception_v3.py

**画像をダウンロードして、認識させてみる
wget ＜画像のURL＞ -O elephant.jpg
python inception_v3.py

**motionの停止
（注意）他の授業でmotionというサービスがインストールされて、自動的に起動している場合があります。
その場合、WEBカメラからの画像取得時にリソースが競合してエラーとなります。
それを避けるために、サービスを停止します。

サービスの停止
sudo systemctl stop motion

再起動時に起動しないようにする
sudo systemctl disable motion

また、取得された画像や動画でディスク容量があふれる場合があります。
画像や動画を削除します。
sudo rm /var/lib/motion/*

*************************************
画像データを集める

**フォト蔵
http://photozou.jp/

**フォト蔵APIの仕様
http://photozou.jp/basic/api

**search_public API
http://photozou.jp/basic/api_method_search_public

**実行用のツールのダウンロード
cd %homepath%
cd Lesson
git clone https://github.com/k1nk/ch8.git
cd ch8

**モジュールのインストール
activate tensorenv
conda install urllib3
conda install beautifulsoup4
conda install requests

**写真のダウンロード
python phototkura_downloader.py "青リンゴ" green_apple_kura
